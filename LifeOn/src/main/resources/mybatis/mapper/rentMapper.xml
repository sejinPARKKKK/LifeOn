<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.rent.mapper.RentMapper">

	<!-- 상품번호 -->
	<select id="productSeq" resultType="Long">
		SELECT product_seq.NEXTVAL FROM dual
	</select>
	
	<!-- 대여물품 등록 -->
	<insert id="insertRentProduct" parameterType="com.sp.app.rent.model.RentProduct">
		INSERT ALL
			INTO PRODUCT(pnum, ptype, pname, pct, pph, csn, num)
				VALUES (#{pnum}, '물품대여', #{pname}, #{pct}, #{pph, jdbcType=VARCHAR}, #{csn}, #{num})
				
			INTO PRODUCT_RENT(pnum, prp, prd, prs, pra, prad, prlp)
				VALUES (#{pnum}, #{prp}, SYSDATE, '대여가능', #{pra, jdbcType=VARCHAR}, #{prad}, #{prlp})
		SELECT * FROM dual     
	</insert>

	<insert id="insertRentProductFile" parameterType="com.sp.app.rent.model.RentProduct">
		INSERT INTO PRODUCT_PICTURE (ppnum, ppp, pnum)
	    	VALUES (product_picture_seq.NEXTVAL, #{ppp, jdbcType=VARCHAR}, #{pnum})
	</insert>
	
	<sql id="searchSql">
		<choose>
			<!-- 상품명 -->
			<when test="schType == 'productName'">
				INSTR(pname, #{kwd}) &gt; 0
			</when>
			<!-- 상품등록날짜 -->
			<when test="schType == 'reg_date'">
				(TO_CHAR(prd, 'YYYY-MM-DD') = #{kwd}
			    	OR TO_CHAR(prd, 'YYYYMMDD') = #{kwd})
			</when>
			<!-- 대여상태 -->
			<when test="schType == 'status'">
				INSTR(prs, #{kwd}) &gt; 0
			</when>
			<!-- 거래위치 -->
			<when test="schType == 'addr'">
				INSTR(pra, #{kwd}) &gt; 0
			</when>
			<otherwise>
				INSTR(${schType}, #{kwd}) &gt; 0
			</otherwise>
		</choose>
	</sql>
	
	<!-- 대여물품 수정 -->
 	<update id="updateProduct" parameterType="com.sp.app.rent.model.RentProduct">
		UPDATE PRODUCT SET pname = #{pname}, pct = #{pct}, pph = #{pph, jdbcType=VARCHAR}, csn = #{csn}
		WHERE pnum = #{pnum}
	</update>
	
 	<update id="updateRentProduct" parameterType="com.sp.app.rent.model.RentProduct">
		UPDATE PRODUCT_RENT SET prp = #{prp}, pra = #{pra}, prad = #{prad}, prlp = #{prlp}
		WHERE pnum = #{pnum}
	</update>
	
	<!-- 대여물품 삭제 -->
 	<delete id="deleteRentProduct" parameterType="Long">
		DELETE FROM PRODUCT
		WHERE pnum = #{pnum}
	</delete>
	
	<!-- 사진파일(리스트, 찾기, 삭제) -->
 	<select id="listProductFile" parameterType="Long" resultType="com.sp.app.rent.model.RentProduct">
		SELECT ppnum, ppp, pnum
		FROM PRODUCT_PICTURE
		WHERE pnum = #{pnum}    
	</select>
	
	<select id="findByFileId" parameterType="Long" resultType="com.sp.app.rent.model.RentProduct">
		SELECT ppnum, ppp, pnum
		FROM PRODUCT_PICTURE
	    WHERE ppnum = #{ppnum}
	</select>
	
	<delete id="deleteRentProductFile" parameterType="Map">
		DELETE FROM PRODUCT_PICTURE
		WHERE ${field} = #{pnum}
	</delete>
	
	<!-- 리스트에 출력되는 물품개수 -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM PRODUCT_RENT pr
		JOIN PRODUCT p ON pr.pnum = p.pnum
		JOIN CATEGORY_SMALL s ON p.csn = s.csn
		<where>
			<if test="kwd != null and kwd != '' ">
				<include refid="searchSql"/>
			</if>
			<!-- 카테고리 관련 WHERE 문 -->
			<if test="cbn != 0 and cbn != null">
            	cbn = #{cbn}
        	</if>
        	<if test="csn != 0 and csn != null">
            	s.csn = #{csn}
        	</if>
		</where>
	</select>
	
	<!-- 전체 물품 리스트 -->
	<select id="listRentProduct" parameterType="map" resultType="com.sp.app.rent.model.RentProduct">
		SELECT p.pnum, pname, pct, pph, p.num, cbn, c.csn, csc, prp, prd, prs, pra, prlp
		FROM PRODUCT p
		JOIN PRODUCT_RENT pr ON p.pnum = pr.pnum
		JOIN CATEGORY_SMALL c ON p.csn = c.csn
		<where>
			<if test="kwd != null and kwd != ''">
				<include refid="searchSql"/>
			</if>
			<!-- 카테고리 관련 WHERE 문 -->
			<if test="cbn != 0 and cbn != null">
            	cbn = #{cbn}
        	</if>
        	<if test="csn != 0 and csn != null">
            	c.csn = #{csn}
        	</if>
		</where>
		ORDER BY pnum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<!-- 베스트 물품 리스트 -->
	<select id="bestListRentProduct" parameterType="map" resultType="com.sp.app.rent.model.RentProduct">
		SELECT p.pnum, pname, pph, p.num, prp, prlp, NVL(productLikeCount, 0) productLikeCount
		FROM PRODUCT p
		JOIN PRODUCT_RENT pr ON p.pnum = pr.pnum
		LEFT OUTER JOIN (
			SELECT pnum, COUNT(*) productLikeCount
			FROM MEMBER_LIKED
			GROUP BY pnum
		) l ON p.pnum = l.pnum
		WHERE productLikeCount &gt; 0
		ORDER BY productLikeCount DESC, pnum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	
	<!-- 물품 상세 보기 -->
	<select id="findById" parameterType="Long" resultType="com.sp.app.rent.model.RentProduct">
		SELECT p.pnum, pname, pct, pph, p.num, cbn, c.csn, csc, prp, prd, prs, pra, prad, prlp, nickname, profile_image, NVL(productLikeCount, 0) productLikeCount
		FROM PRODUCT p
		JOIN MEMBER m ON p.num = m.num
		JOIN PRODUCT_RENT pr ON p.pnum = pr.pnum
		JOIN CATEGORY_SMALL c ON p.csn = c.csn
		LEFT OUTER JOIN (
			SELECT pnum, COUNT(*) productLikeCount
			FROM MEMBER_LIKED
			WHERE pnum = #{pnum}
			GROUP BY pnum
		) l ON p.pnum = l.pnum
		WHERE p.pnum = #{pnum}
	</select>
	
	<!-- 판매자가 파는 물품리스트 -->
	<select id="findByMemberProduct" parameterType="map" resultType="com.sp.app.rent.model.RentProduct">
		SELECT p.pnum, pname, pph, prp, prlp
		FROM PRODUCT p
		JOIN PRODUCT_RENT pr ON p.pnum = pr.pnum
		<where>
			<if test="kwd != null and kwd != ''">
				<include refid="searchSql"/>
			</if>
		</where>
		WHERE p.pnum != #{pnum} AND num = #{num}
		ORDER BY p.pnum ASC
	</select>
	
	<!-- 대여상품 찜하기 -->
	<insert id="insertMemberLikeProduct" parameterType="map">
		INSERT INTO MEMBER_LIKED (mlnum, mlq, mld, num, pnum)
		VALUES (member_liked_seq.NEXTVAL, 1, SYSDATE, #{num}, #{pnum})
	</insert>
	
	<delete id="deleteMemberLikeProduct" parameterType="map">
		DELETE FROM MEMBER_LIKED
		WHERE num = #{num} AND pnum = #{pnum}
	</delete>
	
	<select id="productLikeCount" parameterType="Long" resultType="Integer">
		SELECT COUNT(*)
		FROM MEMBER_LIKED
		WHERE pnum = #{pnum}
	</select>
	
	<select id="memberProductLiked" parameterType="map" resultType="com.sp.app.rent.model.RentProduct">
		SELECT pnum, num
		FROM MEMBER_LIKED
		WHERE pnum = #{pnum, jdbcType=BIGINT} AND num = #{num, jdbcType=BIGINT}
	</select>
	
	<!-- 카테고리 상품 목록 -->
	<!-- 대분류 카테고리 -->
	<select id="listCategory" resultType="com.sp.app.rent.model.RentProduct">
		SELECT cbn, cbc
		FROM CATEGORY_BIG	 
	</select>
	
	<!-- 소분류 카테고리 -->
	<select id="listSubCategory" parameterType="long" resultType="com.sp.app.rent.model.RentProduct">
		SELECT csn, csc, cbn
		FROM CATEGORY_SMALL
		WHERE cbn = #{cbn}
	</select>

</mapper>